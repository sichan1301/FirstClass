*branch란? 
-> 나무의 가지라는 의미로 작업을 분기해서 처리할수 있는 기능입니다.

*그러면 branch를 왜써요??
-> 파일을 수정할때마다 파일의이름을 바꿔서 수정하게됨. haha.txt -> haha_final.txt ...
수정된 파일이 많아지고 그에따라 합치거나 분기하는 과정에서 관리하기가 힘듬.
branch를 사용하면 이러한 점을 보다 용이하게 버전관리를 할 수가 있음!

**추가설명**
branch를 폴더라고 생각하고 원래 폴더와는 다르게 따로 분기하여 작업한다고 생각해보자
(그림으로 그려주며 설명)

*과제 -> 본인의 repo에 txt파일을 만든뒤 branch를 생성한후 일부분 수정하여 master에 merge를 한뒤 push를 해보자.

*git branch -> 현재 브랜치의 목록을 볼때 사용
*git branch "새로운 브랜치 이름" -> 브랜치를 생성하며 생성된 브랜치는 현재 속해있는 브랜치의 상태를 복사한다.
*git branch -d "브랜치 이름" -> 브랜치를 삭제할때 사용 
*git checkout "전환하려는 브랜치 이름" -> 해당 브랜치로 전환할 때
*git checkout -b "생성하고 전환할 브랜치 이름" -> 브랜치를 생성하고 해당 브랜치로 이동

*git log "비교할 브랜치명1".."비교할 브랜치명2" -> 브랜치간 비교가 가능하다. (1에는 없고 2에는 있는것들)
*git diff "비교할 브랜치명1".."비교할 브랜치명2" -> 브랜치간 코드를 비교할때 사용한다.
*git log [--branches] [--graph] [--decorate] [--oneline] -> 로그에 모든 브랜치를 표시(--branches),
					         							   그래프로 표현(--graph), 
					         							   브랜치명을 표시(--decorate), 
					         							   한줄로 요약표시할때(--oneline)
(직접 코딩하며 설명, graph에서 *은 부모(root)를 가르킴)

*git checkout "브랜치 A의 이름"
 git merge "브랜치 B의 이름" 
-> A 브랜치로 B 브랜치를 병합할때 사용! ( A ← B )
(그림, 코딩으로 설명)

*같은 파일임에도 수정한 line이 다르면 자동으로 병합된다. 
그러나 같은 라인에 서로 다른내용이 겹친상태에서 merge를 하면 conflict 오류가 발생한다.

*merge를 하면 발생하는 메세지들
Fast-forward란? -> 직역하면 빨리감기라는 의미로 A브랜치의 가르키는 방향을 B브랜치의 커밋으로 가르킴, 별도의 커밋을 생성하지않음.
recursive란? -> 떨어져있는 브랜치간의 공통의 부모를 찾아 별도의 커밋(Merge commit)을 생성후 병합한다.
conflict란? -> 병합을 하는 과정에서 오류가 발생 (해결방법 바로 밑에 참고!)

<<<<<<<HEAD
**checkout한 현재 브랜치의 코드**
==========
**브랜치 이름이 branch1인 코드**
>>>>>>>>>branch1

-> 둘의 코드중 하나를 선택하거나 수정하여 저장하고 커밋을 하면 병합이 완료되며 해결이된다!!
 (수정이 완료되면 ======와 >>>>>>HEAD같은 문자열을 지우고 저장하자!)




